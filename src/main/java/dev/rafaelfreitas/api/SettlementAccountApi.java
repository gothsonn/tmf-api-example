/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.28).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package dev.rafaelfreitas.api;

import dev.rafaelfreitas.model.Error;
import dev.rafaelfreitas.model.SettlementAccount;
import dev.rafaelfreitas.model.SettlementAccountCreate;
import dev.rafaelfreitas.model.SettlementAccountUpdate;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-11-06T21:16:01.493Z")

@Validated
@Api(value = "settlementAccount", description = "the settlementAccount API")
@RequestMapping(value = "/tmf-api/accountManagement/v4/")
public interface SettlementAccountApi {

    @ApiOperation(value = "Creates a SettlementAccount", nickname = "createSettlementAccount", notes = "This operation creates a SettlementAccount entity.", response = SettlementAccount.class, tags={ "settlementAccount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = SettlementAccount.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/settlementAccount",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<SettlementAccount> createSettlementAccount(@ApiParam(value = "The SettlementAccount to be created" ,required=true )  @Valid @RequestBody SettlementAccountCreate settlementAccount);


    @ApiOperation(value = "Deletes a SettlementAccount", nickname = "deleteSettlementAccount", notes = "This operation deletes a SettlementAccount entity.", tags={ "settlementAccount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/settlementAccount/{id}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSettlementAccount(@ApiParam(value = "Identifier of the SettlementAccount",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "List or find SettlementAccount objects", nickname = "listSettlementAccount", notes = "This operation list or find SettlementAccount entities", response = SettlementAccount.class, responseContainer = "List", tags={ "settlementAccount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = SettlementAccount.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/settlementAccount",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<List<SettlementAccount>> listSettlementAccount(@ApiParam(value = "Comma-separated properties to be provided in response") @Valid @RequestParam(value = "fields", required = false) String fields,@ApiParam(value = "Requested index for start of resources to be provided in response") @Valid @RequestParam(value = "offset", required = false) Integer offset,@ApiParam(value = "Requested number of resources to be provided in response") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "Updates partially a SettlementAccount", nickname = "patchSettlementAccount", notes = "This operation updates partially a SettlementAccount entity.", response = SettlementAccount.class, tags={ "settlementAccount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = SettlementAccount.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/settlementAccount/{id}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.PATCH)
    ResponseEntity<SettlementAccount> patchSettlementAccount(@ApiParam(value = "Identifier of the SettlementAccount",required=true) @PathVariable("id") String id,@ApiParam(value = "The SettlementAccount to be updated" ,required=true )  @Valid @RequestBody SettlementAccountUpdate settlementAccount);


    @ApiOperation(value = "Retrieves a SettlementAccount by ID", nickname = "retrieveSettlementAccount", notes = "This operation retrieves a SettlementAccount entity. Attribute selection is enabled for all first level attributes.", response = SettlementAccount.class, tags={ "settlementAccount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = SettlementAccount.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class),
        @ApiResponse(code = 405, message = "Method Not allowed", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
    @RequestMapping(value = "/settlementAccount/{id}",
        produces = { "application/json;charset=utf-8" }, 
        consumes = { "application/json;charset=utf-8" },
        method = RequestMethod.GET)
    ResponseEntity<SettlementAccount> retrieveSettlementAccount(@ApiParam(value = "Identifier of the SettlementAccount",required=true) @PathVariable("id") String id,@ApiParam(value = "Comma-separated properties to provide in response") @Valid @RequestParam(value = "fields", required = false) String fields);

}
